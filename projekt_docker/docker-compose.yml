version: '3'

services: 

    myredis: 
        image: 'redis:alpine'


    mypostgres:
        image: 'postgres:alpine'
        environment: 
            - POSTGRES_DB=myappdb
            - POSTGRES_USER=myappuser
            - POSTGRES_PASSWORD=1qaz2wsx
        volumes: 
            - ./postgresdata:/var/lib/postgresql/data
        ports: 
            - 5432:5432


    mybackend:
        restart: always
        build: 
            dockerfile: Dockerfile.dev
            context: ./mybackend
        volumes: 
            - /opt/app/node_modules # bookmark - "zostaw folder taki jaki jest", tzn, pominięty podczas mapowania
            - ./mybackend:/opt/app # zamiast kopiowanie, podmapuje loklany katalog
        environment: 
            - PG_HOST=mypostgres # env var dla postgresa
            - PG_PORT=5432
            - PG_DB=myappdb
            - PG_USER=myappuser
            - PG_PASS=1qaz2wsx 
            - RD_HOST=myredis # env var dla redisa
            - RD_PORT=6379
            
        # nadpisanie domyślego CMD - oczekiwanie na postgres
        command: ./wait-for-it.sh mypostgres:5432 -t 15 -- yarn dev
        # ports: 
        #     - 5000:5000


    mynginx:
        restart: always
        build:
            dockerfile: Dockerfile
            context: ./mynginx
        ports:
            - 80:80
        depends_on: 
            - mybackend
            - myfrontend
        
    
    myfrontend:
        build: 
            dockerfile: Dockerfile.dev
            context: ./myfrontend      
        environment: 
            CHOKIDAR_USEPOLLING: 'true' # watching files env
        volumes:
            - /opt/app/node_modules # pomiń node_modules podczas mapowania
            - ./myfrontend:/opt/app # zamapuj pozostałe pliki aplikacji
